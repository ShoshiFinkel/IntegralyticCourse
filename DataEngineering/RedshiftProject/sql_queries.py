create_log_data = '''DROP TABLE IF EXISTS log_data;
CREATE TABLE log_data (
  artist NVARCHAR(255),
  auth NVARCHAR(75),
  firstName NVARCHAR(150),
  gender VARCHAR(1),
  itemInSession INT,
  lastName NVARCHAR(150),
  length DECIMAL(20, 10),
  level NVARCHAR(150),
  location NVARCHAR(300),
  method NVARCHAR(75),
  page NVARCHAR(75),
  registration DECIMAL(25, 1),
  sessionID INT,
  song NVARCHAR(250),
  status INT,
  ts BIGINT,
  userAgent NVARCHAR(300),
  userID INT
);'''


create_song_data = '''DROP TABLE IF EXISTS song_data;
CREATE TABLE song_data (
  artist_id NVARCHAR(150),
  artist_latitude DECIMAL(30,15),
  artist_location NVARCHAR(250),
  artist_longitude DECIMAL(30,15),
  artist_name NVARCHAR(350),
  duration DECIMAL(15, 7),
  num_songs INT,
  song_id NVARCHAR(150),
  title NVARCHAR(250),
  year INT
);'''


create_ftable_songplays = '''DROP TABLE IF EXISTS songplays;
CREATE TABLE songplays (
  songplays_id bigint primary key generated by default as identity,
  start_time TIMESTAMP,
  user_id INT,
  level NVARCHAR(150),
  song_id NVARCHAR(150),
  artist_id NVARCHAR(150),
  artist_name NVARCHAR(350),
  session_id INT,
  location NVARCHAR(300),
  user_agent NVARCHAR(300)
);'''

create_dtable_users = '''DROP TABLE IF EXISTS users;
CREATE TABLE users (
  user_id INT PRIMARY KEY,
  first_name NVARCHAR(150),
  last_name NVARCHAR(150),
  gender VARCHAR(1),
  level NVARCHAR(150)
);'''


create_dtable_songs = '''DROP TABLE IF EXISTS songs;
CREATE TABLE songs (
  song_id NVARCHAR(150) PRIMARY KEY,
  title NVARCHAR(250),
  artist_id NVARCHAR(150),
  year INT,
  duration DECIMAL(15, 7)
);'''


create_dtable_artists = '''DROP TABLE IF EXISTS artists;
CREATE TABLE artists (
  artist_id NVARCHAR(150) PRIMARY KEY,
  name NVARCHAR(350),
  location NVARCHAR(250),
  latitude DECIMAL(30,15),
  longitude DECIMAL(30,15)
);'''

create_dtable_time = '''DROP TABLE IF EXISTS time;
CREATE TABLE time (
  start_time TIMESTAMP PRIMARY KEY,
  hour VARCHAR(2),
  day VARCHAR(2),
  week VARCHAR(2),
  month VARCHAR(2),
  year VARCHAR(4),
  weekday VARCHAR(1)
);'''


copy_logs = '''copy log_data
from 's3://udacity-dend/log_data'
iam_role 'arn:aws:iam::604238822057:role/MyRedshiftRole' 
region 'us-west-2'
json 'auto ignorecase';'''


copy_songs = '''copy song_data
from 's3://udacity-dend/song_data'
iam_role 'arn:aws:iam::604238822057:role/MyRedshiftRole' 
region 'us-west-2'
json 'auto ignorecase';'''


insert_users = '''INSERT INTO users (user_id, first_name, last_name, gender, level)
(SELECT DISTINCT
    userID,
    firstName,
    lastName,
    gender,
    level
FROM
    log_data
    WHERE userID IS NOT NULL);'''


insert_songs = '''INSERT INTO songs (song_id, title, artist_id, year, duration)
(SELECT DISTINCT
    song_id,
    title,
    artist_id,
    year,
    duration
FROM
    song_data);'''


insert_artists = '''INSERT INTO artists (artist_id, name, location, latitude, longitude)
(SELECT DISTINCT
    artist_id,
    artist_name,
    artist_location,
    artist_latitude,
    artist_longitude
FROM
    song_data);'''


insert_time = '''INSERT INTO time (start_time, hour, day, week, month, year, weekday)
(SELECT DISTINCT
    timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second',
    EXTRACT (HOUR FROM timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second'),
    EXTRACT (DAY FROM timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second'),
    EXTRACT (WEEK FROM timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second'),
    EXTRACT (MONTH FROM timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second'),
    EXTRACT (YEAR FROM timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second'),
    EXTRACT (WEEKDAY FROM timestamp 'epoch' + CAST(ts AS BIGINT)/1000 * interval '1 second')
FROM
    log_data);'''


insert_songplays = '''INSERT INTO songplays (start_time, user_id, level, song_id, artist_id, artist_name, session_id, location, user_agent) 
(SELECT  TIMESTAMP 'epoch' + l.ts/1000 * INTERVAL '1 second',
l.userId,
l.level,
s.song_id,
s.artist_id,
s.artist_name,
l.sessionID,
l.location,
l.userAgent
FROM log_data l
JOIN song_data s
ON s.artist_name = l.artist AND l.song = s.title AND s.duration >= l.length
where l.page = 'NextSong')'''


